language: go

go:
- 1.12.8

os: linux
dist: focal

git:
  depth: false

services:
  - docker

env:  
   global:
   - TAG=nightly
   - RECREATE_TAGS=false
   - NO_COMMIT=''

install:
  - export SHORT_SHA=$(git rev-parse --short HEAD)
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - echo "$QUAY_PASSWORD" |docker login quay.io -u "$QUAY_USERNAME " --password-stdin

jobs:
  include:
   - &unit-test
     stage: Run unit tests
     if: type = pull_request
     install: 
       - export GO111MODULE="on" 
       - go get ${gobuild_args} ./...
     script: bash .travis/unit_tests.sh
     name: Run unit tests on amd64  
     arch: amd64
   - <<: *unit-test
     name: Run unit tests on arm64
     arch: arm64
   - <<: *unit-test
     name: Run unit tests on ppc64le
     arch: ppc64le
   - <<: *unit-test
     name: Run unit tests on s390x
     arch: s390x

   - &nightly-build
     stage: Build images with nightly/short_sha tag
     if: branch = travis-s390x AND env(TAG) = "nightly"
     script:
       - bash .travis/build_nightly.sh $TAG
     name: Build image on amd64
     arch: amd64

   #name is kept for all the jobs as default test command get executed.
   - <<: *nightly-build
     name: Build image on arm64
     arch: arm64

   - <<: *nightly-build
     name: Build image on ppc64le
     arch: ppc64le

   - <<: *nightly-build
     name: Build image on s390x
     arch: s390x
   
   - stage: Publish multiarch image with nightly tag
     if: branch = travis-s390x AND env(TAG) = "nightly"
     script: bash .travis/publish_multiarch.sh $TAG

   - stage: Check existing tags
     if: branch != master AND env(TAG) != "nightly"
     arch: amd64
     script: 
     - |
       set +e
       echo "GITHUB TOKEN:$GITHUB_TOKEN" 
       RECREATE_TAGS=$RECREATE_TAGS
       VERSION=$TAG
       EXISTING_TAG=$(git ls-remote --exit-code origin refs/tags/${VERSION})
       if [[ -n ${EXISTING_TAG} ]]; then
          if [[ ${RECREATE_TAGS} == "true" ]]; then
            echo "[INFO] Removing tag for ${VERSION} version. New tag will be recreated during release."
            git push origin :$VERSION
          else
            echo "[ERROR] Cannot proceed with release - tag ${EXISTING_TAG} already exists."
            exit 1
          fi
       else
          echo "[INFO] No existing tags detected for $VERSION"
       fi

   - &release-build
     stage: Build images for release version
     if: branch != master AND env(TAG) != "nightly"
     script:
       - bash .travis/build_nightly.sh $TAG
     name: build image on amd64
     arch: amd64

   - <<: *release-build
     name: Build image on arm64
     arch: arm64

   - <<: *release-build
     name: build image on ppc64le
     arch: ppc64le

   - <<: *release-build
     name: build image on s390x
     arch: s390x

   - stage: Publish multiarch image with release tag
     if: env(TAG) != "nightly"
     api_key: $GITHUB_TOKEN
     script: bash .travis/publish_multiarch.sh $TAG
     after_success:
       - git config --global user.name "Prabhav Thali"
       - git config --global user.email "Prabhav.Thali1@ibm.com"
       - export GITHUB_TOKEN=$GITHUB_TOKEN
       - bash make-release.sh --version $TAG --tag-release $NO_COMMIT
